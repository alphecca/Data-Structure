import java.io.*;
import java.util.*;
 
public class SortingTest
{ 
	public static void main(String args[])
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 
		try
		{
			boolean isRandom = false;	// 입력받은 배열이 난수인가 아닌가?
			int[] value;	// 입력 받을 숫자들의 배열
			String nums = br.readLine();	// 첫 줄을 입력 받음
			if (nums.charAt(0) == 'r')
			{
				// 난수일 경우
				isRandom = true;	// 난수임을 표시
 
				String[] nums_arg = nums.split(" ");
 
				int numsize = Integer.parseInt(nums_arg[1]);	// 총 갯수
				int rminimum = Integer.parseInt(nums_arg[2]);	// 최소값
				int rmaximum = Integer.parseInt(nums_arg[3]);	// 최대값
 
				Random rand = new Random();	// 난수 인스턴스를 생성한다.
 
				value = new int[numsize];	// 배열을 생성한다.
				for (int i = 0; i < value.length; i++)	// 각각의 배열에 난수를 생성하여 대입
					value[i] = rand.nextInt(rmaximum - rminimum + 1) + rminimum;
			}
			else
			{
				// 난수가 아닐 경우
				int numsize = Integer.parseInt(nums);
 
				value = new int[numsize];	// 배열을 생성한다.
				for (int i = 0; i < value.length; i++)	// 한줄씩 입력받아 배열원소로 대입
					value[i] = Integer.parseInt(br.readLine());
			}
 
			// 숫자 입력을 다 받았으므로 정렬 방법을 받아 그에 맞는 정렬을 수행한다.
			while (true)
			{
				int[] newvalue = (int[])value.clone();	// 원래 값의 보호를 위해 복사본을 생성한다.
 
				String command = br.readLine();
 
				long t = System.currentTimeMillis();
				switch (command.charAt(0))
				{
					case 'B':	// Bubble Sort
						newvalue = DoBubbleSort(newvalue);
						break;
					case 'I':	// Insertion Sort
						newvalue = DoInsertionSort(newvalue);
						break;
					case 'H':	// Heap Sort
						newvalue = DoHeapSort(newvalue);
						break;
					case 'M':	// Merge Sort
						newvalue = DoMergeSort(newvalue);
						break;
					case 'Q':	// Quick Sort
						newvalue = DoQuickSort(newvalue, 0, newvalue.length-1);
						break;
					case 'R':	// Radix Sort
						newvalue = DoRadixSort(newvalue);
						break;
					case 'X':
						return;	// 프로그램을 종료한다.
					default:
						throw new IOException("잘못된 정렬 방법을 입력했습니다.");
				}
				if (isRandom)
				{
					// 난수일 경우 수행시간을 출력한다.
					System.out.println((System.currentTimeMillis() - t) + " ms");
				}
				else
				{
					// 난수가 아닐 경우 정렬된 결과값을 출력한다.
					for (int i = 0; i < newvalue.length; i++)
					{
						System.out.println(newvalue[i]);
					}
				}
 
			}
		}
		catch (IOException e)
		{
			System.out.println("입력이 잘못되었습니다. 오류 : " + e.toString());
		}
	}
 
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private static int[] DoBubbleSort(int[] value)
	{
		int temp;
		for(int j=0;j<value.length-1; j++){
			for(int i=0;i<value.length-j-1; i++){
				while(value[i]>value[i+1]){
					temp = value[i];
					value[i]=value[i+1];
					value[i+1]=temp;				
				}
			}
		}
		return (value);
	}
 
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private static int[] DoInsertionSort(int[] value)
	{
		int temp;
		for(int j=1;j<value.length;j++){
			int i=0;
			while(value[i]<=value[j]&&i<j) i++;
			temp=value[j];
			for(int k=j;k>i;k--)	value[k]=value[k-1];
			value[i]=temp;
		}
		return (value);
	}
 
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private static int[] DoMergeSort(int[] value)
	{
		//non inplace
		int temp;
		if(value.length==1) return value;
		else if(value.length==2){
			if(value[0]>value[1]){
				temp = value[0];
				value[0] = value[1];
				value[1] = temp;
			}
			return value;
		}
		else{
			int[] newvalue = new int[value.length];
			int[] Left = new int[value.length/2];
			int[] Right = new int[(value.length/2)+1];
			int i=0,j=0,k=0;
			for(i=0;i<value.length/2;i++){
				Left[i] = value[i];
			}
			j=value.length/2;
			for(i=0;i<(value.length/2)+1;i++){
					if(j<value.length)	Right[i] = value[j];
					j++;
			}
			Left = DoMergeSort(Left);
			Right= DoMergeSort(Right);
			
				
			i=j=k=0;
			while(k<newvalue.length&&i<=Left.length&&j<=Right.length){
				if(i==Left.length&&j!=Right.length){
					newvalue[k]=Right[j];
					k++;
					j++;
				}
				else if(j==Right.length&&i!=Left.length){
					newvalue[k]=Left[i];
					i++;
					k++;
				}
				else if(i==Right.length&&j==Left.length)	break;
				else{
					if(Left[i] <= Right[j]){
						newvalue[k]=Left[i];
						i++;
						k++;
					}
					else{//(Right[j]<Left[i])
						newvalue[k] = Right[j];
						j++;
						k++;
					}
						
				}
			}
			return newvalue;
		}
	}
 
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private static int[] DoQuickSort(int[] value, int start, int end){
		//start: inclusive, end: exclusive
		//in place sort
		int i=start+1,j=value.length-1,temp;
		int pivot=value[start];
		if(end-start<=1){
			if(value[end]<value[start]){
				temp=value[end];
				value[end]=value[start];
				value[start]=temp;
			}
		}
		else{
			while(i<=j){
				if(pivot<value[i]){
					if(pivot>value[j]){
						temp=value[j];
						value[j]=value[i];
						value[i]=temp;
						i++;
						j--;
					}
					else	j--;
				}
				else i++;	
			}
			if(value[i]<=pivot){
				for(int k=start;k<i;k++)	value[k]=value[k+1];
				value[i]=pivot;
				DoQuickSort(value, start, i);
				DoQuickSort(value, i+1, end);
			}
			else{
				for(int k=start;k<i-1;k++)		value[k]=value[k+1];
				value[i-1]=pivot;
				DoQuickSort(value, start, i-1);
				DoQuickSort(value, i, end);
			}
		}
		return value;
	}
 
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private static int[] DoRadixSort(int[] value)
	{
		int temp, i, m=1, k=0;
		int[][] bucket = new int[10][value.length];
		int[] count=new int[10];
		
		while(m<10){
			for(i=0;i<10;i++){
				count[i]=0;
				for(int j=0;j<value.length;j++)	bucket[i][j]=0;
			}
		
			for(i=0;i<value.length;i++){
				if(value[i]<0) temp=((((value[i]*(-1))%(int)Math.pow(10, m)))/((int)Math.pow(10,m-1)));
				else temp=((value[i]%(int)Math.pow(10, m))/((int)Math.pow(10, m-1)));
		
				switch(temp){
				case(0):bucket[0][count[0]++]=value[i];
				break;
				case(1):bucket[1][count[1]++]=value[i];
				break;
				case(2):bucket[2][count[2]++]=value[i];
				break;
				case(3):bucket[3][count[3]++]=value[i];
				break;
				case(4):bucket[4][count[4]++]=value[i];
				break;
				case(5):bucket[5][count[5]++]=value[i];
				break;
				case(6):bucket[6][count[6]++]=value[i];
				break;
				case(7):bucket[7][count[7]++]=value[i];
				break;
				case(8):bucket[8][count[8]++]=value[i];
				break;
				case(9):bucket[9][count[9]++]=value[i];
				break;	
				}	
			}
			
			i=0;
			for(k=0;k<10;k++)	for(int j=0;j<count[k];j++)	{
				value[i]=bucket[k][j];
				i++;
			}			
			m++;
		}//end of while
		for(i=0;i<value.length;i++){
			if(value[i]<0){
				temp=value[i];
				for(k=i;k>0;k--)	value[k]=value[k-1];
				value[0]=temp;
			}
		}
		for(int aa=0;aa<value.length;aa++){
			System.out.println(value[aa]);
		}			
		return (value);
				
	}
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private static int[] DoHeapSort(int[] value)
	{
	// TODO : Heap Sort 를 구현하라.
	//heap: in place sort
		
		PriorityQueue<Integer> q = new PriorityQueue<Integer>();
		for(int i=0;i<value.length;i++)	q.add(value[i]);
		for(int i=0;i<value.length;i++)	value[i]=(int)q.poll().longValue();
		
		
	return (value);
}
 
}